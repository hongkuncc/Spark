<assembly xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0
          http://maven.apache.org/xsd/assembly-1.1.0.xsd">
    <!-- TODO: a jarjar format would be better -->
    <!-- 添加到生成文件名称的后缀符 -->
    <id>1.3.0</id>
    <!-- 打包类型 -->
    <formats>
        <!--<format>jar</format>-->
        <format>tar.gz</format>
    </formats>
    <!--  指定是否包含打包层目录 -->
    <includeBaseDirectory>false</includeBaseDirectory>
    <!-- 指定要包含的文件集 -->
    <fileSets>
        <fileSet>
            <!-- 指定目录 -->
            <!--<directory>${project.build.directory}/classes</directory>-->
            <directory>target</directory>
            <!-- 指定文件集合的输出目录，该目录是相对于根目录 -->
            <!--<outputDirectory>/</outputDirectory>-->
            <outputDirectory>./sx_lidrp_safe/dm</outputDirectory>
            <!-- 排除文件 -->
            <includes>
<!--                <exclude>*.xml</exclude>
                <exclude>*.properties</exclude>-->
                <include>lcloud-lidrp-dap.jar</include>
            </includes>
        </fileSet>

        <fileSet>
            <!-- 指定目录 -->
            <!--<directory>${project.build.directory}/classes</directory>-->
            <directory>sh</directory>
            <!-- 指定文件集合的输出目录，该目录是相对于根目录 -->
            <outputDirectory>./sx_lidrp_safe/dm/sh</outputDirectory>
            <!-- 排除文件 -->
            <includes>
                 <include>**/**/*.sh</include>
            </includes>
        </fileSet>

        <fileSet>
            <!-- 指定目录 -->
            <!--<directory>${project.build.directory}/classes</directory>-->
            <directory>src/main/resources</directory>
            <!-- 指定文件集合的输出目录，该目录是相对于根目录 -->
            <outputDirectory>./sx_lidrp_safe/config</outputDirectory>
            <!-- 排除文件 -->
            <includes>
                <include>**/*.properties</include>
            </includes>
        </fileSet>

    </fileSets>
    <!-- 用来定制工程依赖 jar 包的打包方式 -->
 <!--   <dependencySets>
        <dependencySet>
            &lt;!&ndash; 指定包依赖目录，该目录是相对于根目录 &ndash;&gt;
            <outputDirectory>/</outputDirectory>
            &lt;!&ndash; 当前项目构件是否包含在这个依赖集合里 &ndash;&gt;
            <useProjectArtifact>false</useProjectArtifact>
            &lt;!&ndash; 是否将第三方jar包解压到该依赖中 false 直接引入jar包 true解压引入 &ndash;&gt;
            <unpack>false</unpack>
            &lt;!&ndash; 将scope为runtime的依赖包打包到lib目录下。 &ndash;&gt;
            <scope>runtime</scope>
        </dependencySet>
    </dependencySets>-->
</assembly>
